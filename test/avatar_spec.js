// Generated by CoffeeScript 1.8.0
(function() {
  describe("Avatar", function() {
    var avatar, error_spy, image, load_spy;
    avatar = image = load_spy = error_spy = null;
    before(function() {
      image = document.createElement('img');
      image.id = 'avatar-1';
      image.alt = '';
      image.name = 'avatar-1';
      image.width = 80;
      image.height = 80;
      document.body.appendChild(image);
      return image = document.getElementById('avatar-1');
    });
    afterEach(function() {
      return avatar = null;
    });
    describe('#constructor', function() {
      it('should render', function() {
        avatar = new Avatar(image);
        return avatar.settings.useGravatar.should.be["true"];
      });
      it('should allow options', function() {
        avatar = new Avatar(image, {
          useGravatar: false
        });
        return avatar.settings.useGravatar.should.not.be["true"];
      });
      return it('should render a canvas', function() {
        avatar = new Avatar(image, {
          initials: 'MC'
        });
        return avatar.settings.useGravatar.should.be["true"];
      });
    });
    describe('#setSource', function() {
      return it('should set the src attribute', function() {
        avatar = new Avatar(image);
        avatar.setSource('data:image/png;');
        image.src.should.equal('data:image/png;');
        avatar.setSource('http://placekitten.com/200/300');
        image.src.should.equal('http://placekitten.com/200/300');
        avatar.setSource();
        return image.src.should.equal('http://placekitten.com/200/300');
      });
    });
    describe('#initialAvatar', function() {
      beforeEach(function() {
        return avatar = new Avatar(image);
      });
      return it('should return a PNG', function() {
        var png;
        png = avatar.initialAvatar('MC', avatar.settings);
        return png.should.match(/^data:image\/png;base64,iV/);
      });
    });
    describe('#gravatarUrl', function() {
      it('should return a Gravatar URL with an email address', function() {
        var url;
        avatar = new Avatar(image, {
          email: 'test@test.com'
        });
        url = avatar.gravatarUrl(avatar.settings);
        return url.should.equal('https://secure.gravatar.com/avatar/b642b4217b34b1e8d3bd915fc65c4452?s=80&d=mm&r=x');
      });
      it('should return a Gravatar URL with an hash', function() {
        var url;
        avatar = new Avatar(image, {
          hash: 'b642b4217b34b1e8d3bd915fc65c4452'
        });
        url = avatar.gravatarUrl(avatar.settings);
        return url.should.equal('https://secure.gravatar.com/avatar/b642b4217b34b1e8d3bd915fc65c4452?s=80&d=mm&r=x');
      });
      it('should return a Gravatar URL with nothing', function() {
        var url;
        avatar = new Avatar(image);
        url = avatar.gravatarUrl(avatar.settings);
        return url.should.equal('https://secure.gravatar.com/avatar/00000000000000000000000000000000?s=80&d=mm&r=x');
      });
      it('should return a Gravatar URL with a custom size', function() {
        var url;
        avatar = new Avatar(image, {
          size: 100
        });
        url = avatar.gravatarUrl(avatar.settings);
        url.should.equal('https://secure.gravatar.com/avatar/00000000000000000000000000000000?s=100&d=mm&r=x');
        avatar = new Avatar(image, {
          size: '100'
        });
        url = avatar.gravatarUrl(avatar.settings);
        return url.should.equal('https://secure.gravatar.com/avatar/00000000000000000000000000000000?s=100&d=mm&r=x');
      });
      it('should return a Gravatar URL with a custom fallback', function() {
        var url;
        avatar = new Avatar(image, {
          fallback: 'test'
        });
        url = avatar.gravatarUrl(avatar.settings);
        return url.should.equal('https://secure.gravatar.com/avatar/00000000000000000000000000000000?s=80&d=test&r=x');
      });
      return it('should return a Gravatar URL with a custom rating', function() {
        var url;
        avatar = new Avatar(image, {
          rating: 'g'
        });
        url = avatar.gravatarUrl(avatar.settings);
        return url.should.equal('https://secure.gravatar.com/avatar/00000000000000000000000000000000?s=80&d=mm&r=g');
      });
    });
    describe('#merge', function() {
      return it('should merge objects', function() {
        var defaults, options, output;
        avatar = new Avatar(image);
        defaults = {
          useGravatar: true,
          useInitials: true,
          allowGravatarFallback: false,
          initials: '',
          initial_fg: '#888',
          initial_bg: '#f4f6f7',
          initial_size: null,
          initial_weight: 100,
          initial_font_family: "'Lato', 'Lato-Regular', 'Helvetica Neue'",
          hash: '00000000000000000000000000000000',
          email: null,
          size: 80,
          fallback: 'mm',
          rating: 'x',
          forcedefault: false,
          fallbackImage: '',
          debug: false
        };
        options = {
          useGravatar: false,
          useInitials: false,
          allowGravatarFallback: true,
          initials: 'MDC',
          initial_fg: '#111',
          initial_bg: '#222',
          initial_size: 1,
          initial_weight: 2,
          initial_font_family: 'Comic Sans',
          hash: '00000000000000000000000000000000',
          email: 'matthew@apptentive.com',
          size: 120,
          fallback: 'mm',
          rating: 'pg',
          forcedefault: true,
          fallbackImage: 'nah',
          debug: false
        };
        output = avatar.merge(defaults, options);
        return output.should.deep.equal(options);
      });
    });
    return describe('jQuery Helper', function() {
      return it('should create an avatar with options', function() {
        $('#avatar-1').avatar({
          useGravatar: false,
          useInitials: true,
          initials: 'MC'
        });
        return $('#avatar-1').attr('src').should.match(/^data:image\/png;base64,iV/);
      });
    });
  });

}).call(this);
